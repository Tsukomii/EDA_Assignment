hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,100, max = 255, alpha = 128) # Yellow
c2 = rgb(216,216,200, max = 255, alpha = 77)  # Grey
c3 = rgb(107,255,255, max = 255, alpha = 128) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls()) #Clean Environment
df <- read.csv("/Users/Kurox/Desktop/DS311/EDA_Assignment/EDA_Python_Tristan/data/ames.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls()) #Clean Environment
df <- read.csv("/Users/Kurox/Desktop/DS311/EDA_Assignment/EDA_Assignment/EDA_Python_Tristan/data/ames.csv")
df <- df[, -1] # Remove index column
dim(df)
df[1:40, 1:8] # First 40 observations and first 8 variables
str(df)
hist(df$SalePrice, xlab = "Sale Price", col = ("#FF0000"),
ylab = "Number of Houses", main = "Distribution of Sale Prices",
breaks = seq(-7500, 802500, by = 15000), ylim = c(0, 200))
y = df$SalePrice
text <- function(y) {
noquote(c(paste("Median:", median(y)), paste("Mean:", mean(y)),
paste("Standard Deviation:", sd(y))))
}
summary(y); cat(text(y), sep="\n")
hist(df$TotRmsAbvGrd, xlab = "Total Rooms (Excluding Bathrooms)",
ylab = "Number of Houses", breaks = seq(1.25, 14.25, by = 0.5),
main = "Distribution of Total Rooms Above Grade",
col = ("#FF0000"), border=par('bg'))
y = df$TotRmsAbvGrd
summary(y); cat(text(y), sep="\n")
hist(df$OverallCond, xlab = "Condition of House",
ylab = "Number of Houses", breaks = seq(0.75, 9.25, by = 0.5),
main = "Distribution of House Condition on a 1-10 Scale",
xlim = range(1,10),
col = ("#FF0000"), border=par('bg'))
y = df$OverallCond
summary(y); cat(text(y), sep="\n")
below_average_condition = df[df$OverallCond < 5, ]
average_condition = df[df$OverallCond == 5, ]
above_average_condition = df[df$OverallCond > 5, ]
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 128) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 77)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 128) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
# Create a df that contains only numeric columns
# and doesn't include SalePrice
numeric_df = df[, unlist(lapply(df, is.numeric))]
numeric_df = numeric_df[, !names(numeric_df) %in% "SalePrice"]
# Create list of correlations
correlations = cor(numeric_df, df$SalePrice)
# Find the largest value, and the column name at that index
max_corr_value = max(correlations, na.rm = TRUE)
i = which(correlations == max_corr_value)
max_corr_column = rownames(correlations)[[i]]
noquote(c(paste("Most Positively Correlated Column:",
max_corr_column),
paste("Most Positively Correlated Value:",
max_corr_value)))
min_corr_value = min(correlations, na.rm = TRUE)
j = which(correlations == min_corr_value)
min_corr_column = rownames(correlations)[[j]]
noquote(c(paste("Most Negatively Correlated Column:",
min_corr_column),
paste("Most Negative Correlated Value:",
min_corr_value)))
library(RColorBrewer)
colors = brewer.pal(n = length(unique(df[, max_corr_column])),
name = "Set3")
colors2 = brewer.pal(n = length(unique(df[, min_corr_column])),
name = "Set2")
boxplot(df$SalePrice ~ df[, max_corr_column],
xlab = "OverallQuality", ylab = "Sale Price",
main = "Overall Quality vs. Sale Price",
col = colors)
boxplot(df$SalePrice ~ df[, min_corr_column],
xlab = "Number of Kitchens Above Ground",
ylab = "Sale Price", col = colors2,
main = "Number of Kitchens vs. Sale Price")
# Make a new column, Age
df$Age = df$YrSold - df$YearBuilt
# Plot Age vs. SalePrice
plot(df$Age, df$SalePrice, xlab = "Age of Home at Time of Sale",
ylab = "Sale Price", col = "darkgreen",
main = "Home Age vs. Sale Price")
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 120) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 70)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 120) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 120) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 70)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 1) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 120) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 70)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 150) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 200) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 90)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 150) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 255) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 90)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 150) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 200) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 90)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 150) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 120) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 70)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 128) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls()) #Clean Environment
df <- read.csv("/Users/Kurox/Desktop/DS311/EDA_Assignment/EDA_Assignment/EDA_Python_Tristan/data/ames.csv")
df <- df[, -1] # Remove index column
dim(df)
df[1:40, 1:8] # First 40 observations and first 8 variables
str(df)
hist(df$SalePrice, xlab = "Sale Price", col = ("#FF0000"),
ylab = "Number of Houses", main = "Distribution of Sale Prices",
breaks = seq(-7500, 802500, by = 15000), ylim = c(0, 200))
y = df$SalePrice
text <- function(y) {
noquote(c(paste("Median:", median(y)), paste("Mean:", mean(y)),
paste("Standard Deviation:", sd(y))))
}
summary(y); cat(text(y), sep="\n")
hist(df$TotRmsAbvGrd, xlab = "Total Rooms (Excluding Bathrooms)",
ylab = "Number of Houses", breaks = seq(1.25, 14.25, by = 0.5),
main = "Distribution of Total Rooms Above Grade",
col = ("#FF0000"), border=par('bg'))
y = df$TotRmsAbvGrd
summary(y); cat(text(y), sep="\n")
hist(df$OverallCond, xlab = "Condition of House",
ylab = "Number of Houses", breaks = seq(0.75, 9.25, by = 0.5),
main = "Distribution of House Condition on a 1-10 Scale",
xlim = range(1,10),
col = ("#FF0000"), border=par('bg'))
y = df$OverallCond
summary(y); cat(text(y), sep="\n")
below_average_condition = df[df$OverallCond < 5, ]
average_condition = df[df$OverallCond == 5, ]
above_average_condition = df[df$OverallCond > 5, ]
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 120) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 70)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 128) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 0.5,
pch = 15, pt.cex = 1.3)
# Create a df that contains only numeric columns
# and doesn't include SalePrice
numeric_df = df[, unlist(lapply(df, is.numeric))]
numeric_df = numeric_df[, !names(numeric_df) %in% "SalePrice"]
# Create list of correlations
correlations = cor(numeric_df, df$SalePrice)
# Find the largest value, and the column name at that index
max_corr_value = max(correlations, na.rm = TRUE)
i = which(correlations == max_corr_value)
max_corr_column = rownames(correlations)[[i]]
noquote(c(paste("Most Positively Correlated Column:",
max_corr_column),
paste("Most Positively Correlated Value:",
max_corr_value)))
min_corr_value = min(correlations, na.rm = TRUE)
j = which(correlations == min_corr_value)
min_corr_column = rownames(correlations)[[j]]
noquote(c(paste("Most Negatively Correlated Column:",
min_corr_column),
paste("Most Negative Correlated Value:",
min_corr_value)))
library(RColorBrewer)
colors = brewer.pal(n = length(unique(df[, max_corr_column])),
name = "Set3")
colors2 = brewer.pal(n = length(unique(df[, min_corr_column])),
name = "Set2")
boxplot(df$SalePrice ~ df[, max_corr_column],
xlab = "OverallQuality", ylab = "Sale Price",
main = "Overall Quality vs. Sale Price",
col = colors)
boxplot(df$SalePrice ~ df[, min_corr_column],
xlab = "Number of Kitchens Above Ground",
ylab = "Sale Price", col = colors2,
main = "Number of Kitchens vs. Sale Price")
# Make a new column, Age
df$Age = df$YrSold - df$YearBuilt
# Plot Age vs. SalePrice
plot(df$Age, df$SalePrice, xlab = "Age of Home at Time of Sale",
ylab = "Sale Price", col = "darkgreen",
main = "Home Age vs. Sale Price")
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 120) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 70)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 128) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 1,
pch = 20, pt.cex = 1.5)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls()) #Clean Environment
df <- read.csv("/Users/Kurox/Desktop/DS311/EDA_Assignment/EDA_Assignment/EDA_Python_Tristan/data/ames.csv")
df <- df[, -1] # Remove index column
dim(df)
df[1:40, 1:8] # First 40 observations and first 8 variables
str(df)
hist(df$SalePrice, xlab = "Sale Price", col = ("#FF0000"),
ylab = "Number of Houses", main = "Distribution of Sale Prices",
breaks = seq(-7500, 802500, by = 15000), ylim = c(0, 200))
y = df$SalePrice
text <- function(y) {
noquote(c(paste("Median:", median(y)), paste("Mean:", mean(y)),
paste("Standard Deviation:", sd(y))))
}
summary(y); cat(text(y), sep="\n")
hist(df$TotRmsAbvGrd, xlab = "Total Rooms (Excluding Bathrooms)",
ylab = "Number of Houses", breaks = seq(1.25, 14.25, by = 0.5),
main = "Distribution of Total Rooms Above Grade",
col = ("#FF0000"), border=par('bg'))
y = df$TotRmsAbvGrd
summary(y); cat(text(y), sep="\n")
hist(df$OverallCond, xlab = "Condition of House",
ylab = "Number of Houses", breaks = seq(0.75, 9.25, by = 0.5),
main = "Distribution of House Condition on a 1-10 Scale",
xlim = range(1,10),
col = ("#FF0000"), border=par('bg'))
y = df$OverallCond
summary(y); cat(text(y), sep="\n")
below_average_condition = df[df$OverallCond < 5, ]
average_condition = df[df$OverallCond == 5, ]
above_average_condition = df[df$OverallCond > 5, ]
a = below_average_condition$SalePrice
b = average_condition$SalePrice
c = above_average_condition$SalePrice
# Create colors with reduced opacity (alpha) to see overlap
c1 = rgb(255,255,127, max = 255, alpha = 120) # Yellow
c2 = rgb(216,216,216, max = 255, alpha = 70)  # Grey
c3 = rgb(127,255,255, max = 255, alpha = 128) # Cyan
# Create custom bins so all are on the same scale
breaks_by = as.integer(median(df$SalePrice) / 20)
breaks_seq = seq(min(df$SalePrice), max(df$SalePrice) + breaks_by,
by = breaks_by)
hgA = hist(a, breaks = breaks_seq, plot = FALSE)
hgB = hist(b, breaks = breaks_seq, plot = FALSE)
hgC = hist(c, breaks = breaks_seq, plot = FALSE)
# Plot three histograms
plot(hgB, col = c2, ylim = c(0, 70),
xlab = "Sale Price", ylab = "Number of Houses",
main = "Distribution of Sale Price Grouped by Condition")
plot(hgC, col = c3, add = TRUE)
plot(hgA, col = c1, add = TRUE)
legend("topright",
legend = c("above average condition",
"average condition",
"below average condition"),
col = c(c3, c2, c1), cex = 1,
pch = 20, pt.cex = 1.5)
ggplot(boxplot)(df$SalePrice, xlab = "Sale Price", col = ("#FF0000"),
ylab = "Number of Houses", main = "Distribution of Sale Prices",
breaks = seq(-7500, 802500, by = 15000), ylim = c(0, 200))
ggplot2(boxplot)(df$SalePrice, xlab = "Sale Price", col = ("#FF0000"),
ylab = "Number of Houses", main = "Distribution of Sale Prices",
breaks = seq(-7500, 802500, by = 15000), ylim = c(0, 200))
